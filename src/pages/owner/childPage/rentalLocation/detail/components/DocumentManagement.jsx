import {
  Button,
  Card,
  Tag,
  Space,
  Modal,
  Form,
  Input,
  Upload,
  message,
} from "antd";
import { UploadOutlined } from "@ant-design/icons";
import {
  useCreateLandUsesRightMutation,
  useGetLandUsesRightQuery,
  useUpdateLandUsesRightMutation,
} from "../../../../../../redux/services/landUsesApi";
import { useState, useEffect } from "react";
import dayjs from "dayjs";
import { supabase } from "../../../../../../redux/services/supabase";
import { FaEdit, FaFile } from "react-icons/fa";
import { Menu } from "antd";
import { Dropdown } from "antd";
import { getUserId } from "../../../../../../utils/storage";

export default function DocumentManagement({ rentalData }) {
  const userRole = localStorage.getItem("user_role")?.toLowerCase();
  const canEdit = userRole === `"owner"`;
  const canApprove = userRole === `"admin"`;

  const idRental = rentalData?.id;
  const { data: fileData, isLoading } = useGetLandUsesRightQuery(idRental);
  const [isApproveModalOpen, setIsApproveModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDenyModalOpen, setIsDenyModalOpen] = useState(false);
  const { uploading, handleUploadFile } = useFileUpload(idRental);
  const [form] = Form.useForm();
  const [updateDocument] = useUpdateLandUsesRightMutation();
  const [fileUrl, setFileUrl] = useState(null);
  const userId = getUserId();
  const idDocument = fileData?.id || null;
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(() => {
    if (isEditModalOpen && fileData) {
      form.setFieldsValue({
        documentName: fileData.documentName || "",
        note: fileData.note || "",
      });
    }
  }, [isEditModalOpen, fileData, form]);

  if (isLoading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!fileData) return <RentalNone idRental={idRental} canEdit={canEdit} />;

  const handleMenuClick = ({ key }) => {
    if (key === "approve") {
      setIsApproveModalOpen(true);
    } else if (key === "deny") {
      setIsDenyModalOpen(true);
    } else if (key === "edit") {
      setIsEditModalOpen(true);
    }
  };

  const handleBeforeUpload = async (file) => {
    const isPDF = file.type === "application/pdf";
    if (!isPDF) {
      message.error("Ch·ªâ ch·∫•p nh·∫≠n file PDF!");
      return Upload.LIST_IGNORE;
    }

    const uploadedUrl = await handleUploadFile(file);
    if (uploadedUrl) {
      setFileUrl(uploadedUrl);
    }
    return false;
  };

  const handleApprove = async () => {
    const formUpdate = {
      staffId: userId,
      documentStatus: true,
      approvedDate: Date.now(),
      refuseDate: null,
      note: "ƒê√£ ch·∫•p nh·∫≠n gi·∫•y t·ªù",
    };
    try {
      await updateDocument({
        id: idDocument,
        updatedLandUsesRight: formUpdate,
      }).unwrap();
      setIsApproveModalOpen(false);
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i API:", error);
      message.error("L·ªói khi ch·∫•p nh·∫≠n gi·∫•y t·ªù!");
    }
  };

  const handleDeny = (values) => {
    const formUpdate = {
      staffId: userId,
      documentStatus: false,
      approvedDate: null,
      refuseDate: Date.now(),
      note: values.note,
    };
    try {
      updateDocument({ id: idDocument, updatedLandUsesRight: formUpdate });
      setIsDenyModalOpen(false);
      form.resetFields();
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i API:", error);
      message.error("L·ªói khi t·ª´ ch·ªëi gi·∫•y t·ªù!");
    }
  };
  const handleEdit = (values) => {
    const formUpdate = {
      staffId: userId,
      documentName: values.documentName,
      approvedDate: null,
      documentStatus: false,
      // refuseDate: null,
      note: values.note,
      documentFile: fileUrl || fileData.documentFile, // Gi·ªØ file c≈© n·∫øu kh√¥ng t·∫£i l√™n file m·ªõi
    };

    try {
      updateDocument({ id: idDocument, updatedLandUsesRight: formUpdate });
      setIsEditModalOpen(false);
      form.resetFields();
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·∫•y t·ªù:", error);
      message.error("L·ªói khi c·∫≠p nh·∫≠t gi·∫•y t·ªù!");
    }
  };
  const menu = (
    <Menu onClick={handleMenuClick}>
      {canApprove && <Menu.Item key="approve">Ch·∫•p nh·∫≠n</Menu.Item>}
      {canApprove && <Menu.Item key="deny">T·ª´ ch·ªëi</Menu.Item>}
      {canEdit && <Menu.Item key="edit">Ch·ªânh s·ª≠a</Menu.Item>}
    </Menu>
  );

  return (
    <div className="document-management">
      <Space direction="vertical" style={{ width: "100%" }} size="large">
        <Card
          title="Gi·∫•y t·ªù ƒë·ªãa ƒëi·ªÉm"
          extra={
            <Dropdown
              overlay={menu}
              trigger={["click"]}
              placement="bottomRight"
            >
              <div style={{ cursor: "pointer" }}>
                <FaEdit />
              </div>
            </Dropdown>
          }
        >
          <p>
            <strong>Ng√†y t·∫£i l√™n: </strong>
            {fileData.uploadDate
              ? dayjs(fileData.uploadDate, "DD/MM/YYYY HH:mm:ss").format(
                  "hh:mm:ss DD/MM/YYYY"
                )
              : "Ch∆∞a c√≥"}
          </p>
          {fileData.approvedDate && (
            <p>
              <strong>Ng√†y ch·∫•p thu·∫≠n: </strong>
              {fileData.approvedDate
                ? dayjs(fileData.approvedDate, "DD/MM/YYYY HH:mm:ss").format(
                    "hh:mm:ss DD/MM/YYYY"
                  )
                : "Ch∆∞a c√≥"}
            </p>
          )}
          {fileData.refuseDate && (
            <p>
              <strong>Ng√†y t·ª´ ch·ªëi: </strong>
              {fileData.refuseDate
                ? dayjs(fileData.refuseDate, "DD/MM/YYYY HH:mm:ss").format(
                    "hh:mm:ss DD/MM/YYYY"
                  )
                : "Ch∆∞a c√≥"}
            </p>
          )}

          <p>
            <strong style={{ marginRight: 10 }}>Tr·∫°ng th√°i:</strong>
            {fileData.documentStatus && fileData.approvedDate ? (
              <Tag color="success">ƒê√£ duy·ªát</Tag>
            ) : fileData.documentStatus === false && fileData.refuseDate ? (
              <Tag color="error">Ch∆∞a ch·∫•p thu·∫≠n</Tag>
            ) : (
              <Tag color="warning">Ch·ªù duy·ªát</Tag>
            )}
          </p>
          <p>
            <strong>T√™n gi·∫•y t·ªù: </strong>
            {fileData.documentName || "Kh√¥ng c√≥ ghi ch√∫"}
          </p>
          <p>
            <strong>Ghi ch√∫:</strong> {fileData.note || "Kh√¥ng c√≥ ghi ch√∫"}
          </p>
          <div style={{ display: "flex", gap: "14px" }}>
            <strong>File ƒë√≠nh k√®m:</strong>
            {fileData.documentFile ? (
              <a
                href={fileData.documentFile}
                target="_blank"
                rel="noopener noreferrer"
                style={{ color: "blue", fontSize: "16px" }}
              >
                <FaFile />
                {fileData.documentName}
              </a>
            ) : (
              "Ch∆∞a c√≥ file n√†o"
            )}
            (·∫§n v√†o ƒë·ªÉ xem)
          </div>
        </Card>
      </Space>

      <Modal
        title="X√°c nh·∫≠n ch·∫•p nh·∫≠n gi·∫•y t·ªù"
        open={isApproveModalOpen}
        onCancel={() => setIsApproveModalOpen(false)}
        onOk={handleApprove}
        okText="X√°c nh·∫≠n"
        cancelText="H·ªßy"
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫•p nh·∫≠n gi·∫•y t·ªù n√†y kh√¥ng?</p>
      </Modal>

      <Modal
        title="Nh·∫≠p l√Ω do t·ª´ ch·ªëi"
        open={isDenyModalOpen}
        onCancel={() => setIsDenyModalOpen(false)}
        footer={null}
      >
        <Form form={form} onFinish={handleDeny} layout="vertical">
          <Form.Item
            name="note"
            label="L√Ω do t·ª´ ch·ªëi"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi" }]}
          >
            <Input.TextArea placeholder="Nh·∫≠p l√Ω do t·ª´ ch·ªëi..." />
          </Form.Item>
          <Space style={{ display: "flex", justifyContent: "flex-end" }}>
            <Button onClick={() => setIsDenyModalOpen(false)}>H·ªßy</Button>
            <Button type="primary" htmlType="submit">
              G·ª≠i
            </Button>
          </Space>
        </Form>
      </Modal>

      <Modal
        title="Ch·ªânh s·ª≠a gi·∫•y t·ªù"
        open={isEditModalOpen}
        onCancel={() => setIsEditModalOpen(false)}
        onOk={() => form.submit()}
      >
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            documentName: fileData.documentName,
            note: fileData.note,
          }}
          onFinish={handleEdit}
        >
          <Form.Item
            name="documentName"
            label="T√™n gi·∫•y t·ªù"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n gi·∫•y t·ªù" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item name="note" label="Ghi ch√∫">
            <Input.TextArea />
          </Form.Item>
          <Form.Item name="documentFile" label="Thay ƒë·ªïi file">
            <Upload beforeUpload={handleBeforeUpload} maxCount={1}>
              <Button icon={<UploadOutlined />}>Ch·ªçn file</Button>
            </Upload>
            {fileUrl && (
              <p>
                <a href={fileUrl} target="_blank">
                  {fileUrl}
                </a>
              </p>
            )}
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}

function RentalNone({ idRental, canEdit }) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [form] = Form.useForm();
  const [fileUrl, setFileUrl] = useState(null);
  const [createDocument, { isLoading }] = useCreateLandUsesRightMutation();
  const { uploading, handleUploadFile } = useFileUpload(idRental);

  console.log("üìç ID Rental:", idRental);

  const convertFormValues = (values) => ({
    staffId: null,
    rentalLocationId: idRental,
    documentName: values.documentName,
    documentType: "Certificate",
    documentStatus: false,
    documentFile: fileUrl, // Ch·ªâ c√≥ m·ªôt file duy nh·∫•t
    uploadDate: dayjs().format("DD/MM/YYYY HH:mm:ss"),
    approvedDate: null,
    refuseDate: null,
    note: values.note || "ƒêang ch·ªù ki·ªÉm tra",
    isDelete: false,
  });

  const handleSubmit = async (values) => {
    try {
      if (!fileUrl) {
        message.error("Vui l√≤ng t·∫£i l√™n m·ªôt file PDF!");
        return;
      }
      console.log("üöÄ D·ªØ li·ªáu g·ª≠i API:", convertFormValues(values));
      await createDocument({ data: convertFormValues(values) }).unwrap();
      message.success("Th√™m gi·∫•y t·ªù th√†nh c√¥ng!");
      setIsModalOpen(false);
      form.resetFields();
      setFileUrl(null);
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i API:", error);
      message.error("L·ªói khi th√™m gi·∫•y t·ªù!");
    }
  };

  const handleBeforeUpload = async (file) => {
    const fileUrl = await handleUploadFile(file);
    if (fileUrl) {
      setFileUrl(fileUrl); // Ghi ƒë√® file c≈©
    }
    return false; // NgƒÉn ch·∫∑n Upload t·ª± ƒë·ªông
  };

  return (
    <div style={{ textAlign: "center", padding: "20px" }}>
      <p>Ch∆∞a c√≥ gi·∫•y t·ªù n√†o.</p>
      {canEdit && (
        <Button type="primary" onClick={() => setIsModalOpen(true)}>
          Th√™m gi·∫•y t·ªù
        </Button>
      )}

      <Modal
        title="Th√™m gi·∫•y t·ªù"
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        onOk={() => form.submit()}
        confirmLoading={isLoading}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{
            documentName: "",
            note: "",
          }}
        >
          <Form.Item
            name="documentName"
            label="T√™n gi·∫•y t·ªù"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n gi·∫•y t·ªù" }]}
          >
            <Input placeholder="Nh·∫≠p t√™n gi·∫•y t·ªù" />
          </Form.Item>
          <Form.Item
            rules={[{ required: true, message: "Vui l√≤ng t·∫£i l√™n file" }]}
            name="documentFile"
            label="T·∫£i l√™n file"
          >
            <Upload beforeUpload={handleBeforeUpload} maxCount={1}>
              <Button icon={<UploadOutlined />} loading={uploading}>
                {uploading ? "ƒêang t·∫£i l√™n..." : "Ch·ªçn file"}
              </Button>
            </Upload>
            {fileUrl && (
              <p>
                <a href={fileUrl} target="_blank" rel="noopener noreferrer">
                  {fileUrl}
                </a>
              </p>
            )}
          </Form.Item>
          <Form.Item name="note" label="Ghi ch√∫">
            <Input.TextArea placeholder="Nh·∫≠p ghi ch√∫" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}

const useFileUpload = (businessId) => {
  const [uploading, setUploading] = useState(false);

  const handleUploadFile = async (file) => {
    if (file.type !== "application/pdf") {
      message.error("Ch·ªâ ch·∫•p nh·∫≠n file PDF!");
      return false;
    }

    setUploading(true);
    const fileName = `business/${businessId || "new"}-${Date.now()}.pdf`;

    try {
      const { error } = await supabase.storage
        .from("business")
        .upload(fileName, file, {
          cacheControl: "3600",
          upsert: true,
        });

      if (error) throw error;

      const { data } = supabase.storage.from("business").getPublicUrl(fileName);
      return data.publicUrl;
    } catch (error) {
      message.error("L·ªói khi t·∫£i l√™n file!");
      return false;
    } finally {
      setUploading(false);
    }
  };

  return { uploading, handleUploadFile };
};
