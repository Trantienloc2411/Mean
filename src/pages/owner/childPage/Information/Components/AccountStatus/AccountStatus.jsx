import {
  Card,
  Typography,
  Space,
  Tooltip,
  Modal,
  Input,
  Button,
  Table,
} from "antd";
import { InfoCircleOutlined, EyeOutlined } from "@ant-design/icons";
import styles from "./AccountStatus.module.scss";
import { useState } from "react";

const { Text } = Typography;

export default function StatusInfo({
  approvalStatus, // "APPROVED", "REJECTED", "PENDING"
  note,
  isAccountActive,
  ownerId,
  refreshOwner,
  tooltipAccountStatus,
  isAccountVerified,
  tooltipAccountVerified,
  refetchLogs,
  approvalLogs = [],

  updateOwner,
}) {
  const [resubmitVisible, setResubmitVisible] = useState(false);
  const [resubmitNote, setResubmitNote] = useState("");
  const getEyeIconColor = () => {
    switch (approvalStatus) {
      case "REJECTED":
        return "#ff4d4f";
      case "PENDING":
        return "#faad14";
      default:
        return "#d9d9d9";
    }
  };
  const handleReSend = async () => {
    if (!resubmitNote.trim()) {
      return Modal.warning({ title: "Vui l√≤ng nh·∫≠p l√Ω do g·ª≠i l·∫°i!" });
    }

    try {
      await updateOwner({
        id: ownerId,
        updatedData: {
          approvalStatus: 4, // ho·∫∑c "RE_SUBMITTED" n·∫øu c√≥ enum ri√™ng
          note: resubmitNote,
        },
      }).unwrap();

      setResubmitNote("");
      setResubmitVisible(false);
      // C√≥ th·ªÉ refetch l·∫°i data n·∫øu c·∫ßn, v√≠ d·ª•:
      await refetchLogs();
      await refreshOwner();

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng n·∫øu c·∫ßn
      // message.success("ƒê√£ g·ª≠i l·∫°i ph√™ duy·ªát!");
    } catch (error) {
      Modal.error({
        title: "G·ª≠i l·∫°i ph√™ duy·ªát th·∫•t b·∫°i!",
        content: error.message,
      });
    }
  };

  const getApprovalValue = () => {
    switch (approvalStatus) {
      case 1:
        return "Ch·ªù ph√™ duy·ªát";
      case 2:
        return "ƒê√£ ph√™ duy·ªát";
      case 3:
        return "B·ªã t·ª´ ch·ªëi";
      case 4:
        return "Ph√™ duy·ªát l·∫°i";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const getApprovalStyle = () => {
    switch (approvalStatus) {
      case "APPROVED":
        return styles.statusTrue;
      case "REJECTED":
        return styles.statusFalse;
      case "PENDING":
        return styles.statusPending; // c·∫ßn th√™m class n√†y trong SCSS
      default:
        return "";
    }
  };

  const statusInfo = [
    {
      label: "Tr·∫°ng th√°i ho·∫°t ƒë·ªông:",
      status: isAccountActive,
      value: isAccountActive ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông",
      tooltip: tooltipAccountStatus,
      valueStyle: isAccountActive ? styles.statusTrue : styles.statusFalse,
    },
    {
      label: "Tr·∫°ng th√°i x√°c th·ª±c:",
      status: isAccountVerified,
      value: isAccountVerified ? "ƒê√£ x√°c th·ª±c" : "Ch∆∞a x√°c th·ª±c",
      tooltip: tooltipAccountVerified,
      valueStyle: isAccountVerified ? styles.statusTrue : styles.statusFalse,
    },
    {
      label: "Tr·∫°ng th√°i ph√™ duy·ªát:",
      status: approvalStatus !== "APPROVED",
      value: getApprovalValue(),
      tooltip: note,
      valueStyle: getApprovalStyle(),
    },
  ];
  console.log(approvalLogs);

  return (
    <>
      <Card title="Tr·∫°ng th√°i t√†i kho·∫£n" className={styles.cardStyle}>
        <Space direction="vertical" size="middle" style={{ width: "100%" }}>
          {statusInfo.map((item, index) => {
            const isApprovalStatus = item.label === "Tr·∫°ng th√°i ph√™ duy·ªát:";

            return (
              <div key={index} className={styles.statusItem}>
                <Text className={styles.statusLabel}>{item.label}</Text>
                <span className={`${styles.statusValue} ${item.valueStyle}`}>
                  {item.value}
                </span>

                {/* Tooltip cho tr·∫°ng th√°i ch∆∞a ƒë·∫°t */}
                {/* {!item.status && ( */}
                <>
                  <Tooltip title={item.tooltip}>
                    <InfoCircleOutlined
                      style={{
                        color: "#1890ff",
                        cursor: "pointer",
                        marginLeft: 8,
                      }}
                    />
                  </Tooltip>

                  {/* Icon üëÅÔ∏è ch·ªâ hi·ªÉn th·ªã cho "Tr·∫°ng th√°i ph√™ duy·ªát" */}
                  {isApprovalStatus && (
                    <Tooltip title="Xem/G·ª≠i l·∫°i ph√™ duy·ªát">
                      <EyeOutlined
                        style={{
                          color: getEyeIconColor(),
                          cursor: "pointer",
                          marginLeft: 8,
                        }}
                        onClick={() => setResubmitVisible(true)}
                      />
                    </Tooltip>
                  )}
                </>
                {/* )} */}
              </div>
            );
          })}
        </Space>
      </Card>

      <Modal
        title="G·ª≠i l·∫°i ph√™ duy·ªát"
        open={resubmitVisible}
        onCancel={() => {
          setResubmitVisible(false);
          setResubmitNote("");
        }}
        footer={[
          <Button key="cancel" onClick={() => setResubmitVisible(false)}>
            H·ªßy
          </Button>,
          <Button key="resubmit" type="primary" onClick={handleReSend}>
            G·ª≠i l·∫°i
          </Button>,
        ]}
        width={800}
        style={{ maxWidth: "90%" }}
      >
        <p>Nh·∫≠p l√Ω do b·∫°n mu·ªën g·ª≠i l·∫°i ph√™ duy·ªát:</p>
        <Input.TextArea
          rows={4}
          placeholder="Nh·∫≠p l√Ω do..."
          value={resubmitNote}
          onChange={(e) => setResubmitNote(e.target.value)}
        />

        <hr style={{ margin: "20px 0" }} />
        <h4>L·ªãch s·ª≠ ph√™ duy·ªát</h4>
        <Table
          columns={[
            { title: "Th·ªùi ƒëi·ªÉm", dataIndex: "createdAt", key: "createdAt" },
            {
              title: "Tr·∫°ng th√°i",
              dataIndex: "newStatus",
              key: "newStatus",
              render: (newStatus) => {
                let statusText = ""; // Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh

                // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i s·ªë th√†nh vƒÉn b·∫£n
                switch (newStatus) {
                  case 1:
                    statusText = "Ch·ªù ph√™ duy·ªát";
                    break;
                  case 2:
                    statusText = "ƒê√£ ph√™ duy·ªát";
                    break;
                  case 3:
                    statusText = "B·ªã t·ª´ ch·ªëi";
                    break;
                  case 4:
                    statusText = "Ph√™ duy·ªát l·∫°i";
                    break;
                  default:
                    statusText = "Kh√¥ng x√°c ƒë·ªãnh";
                }

                // T√πy ch·ªânh m√†u s·∫Øc cho t·ª´ng tr·∫°ng th√°i
                let color = "#000"; // M√†u m·∫∑c ƒë·ªãnh
                if (statusText === "ƒê√£ ph√™ duy·ªát") color = "#52c41a";
                if (statusText === "B·ªã t·ª´ ch·ªëi") color = "#ff4d4f";
                if (statusText === "Ch·ªù ph√™ duy·ªát") color = "#faad14";

                return (
                  <Tooltip
                    title={`Tr·∫°ng th√°i: ${statusText}`}
                    placement="topLeft"
                  >
                    <span style={{ color }}>{statusText}</span>
                  </Tooltip>
                );
              },
            },

            {
              title: "Ghi ch√∫",
              dataIndex: "note",
              key: "note",
              render: (note) => note || "‚Äî",
            },
          ]}
          dataSource={[...(approvalLogs || [])].sort(
            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
          )}
          pagination={false}
          size="small"
          rowKey={(record, index) => `resubmit-${index}`}
        />
      </Modal>
    </>
  );
}
